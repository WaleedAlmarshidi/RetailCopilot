@page "/customersHub"
@rendermode InteractiveServer
@using RetailCopilot.Data
@inject ApplicationDbContext dbContext
@using Microsoft.EntityFrameworkCore;
@using System.ComponentModel;
@inject IJSRuntime js
@using System.Text.Json;
@using Microsoft.AspNetCore.Authorization
@using System.Text

<PageTitle>مركز العملاء</PageTitle>

@attribute [Authorize]

<AuthorizeView>

    <script src="/main.js"></script>

    <div class="row justify-content-center align-items-center mb-3">
        <div class="col-12 col-md-6 mt-4">
            <input id="text-input" @onfocus="onInputFocus" @onblur="onInputBlur" type="text" class="form-control" @bind="SearchTerm" placeholder="5XXXXXXXX" @ondblclick="EraseSearchTerm" inputmode="numeric" />
        </div>
    </div>
    
        @* <div class="animated-circle"></div> *@
        @* <iframe src="https://lottie.host/embed/a820b356-ddef-4cb0-97a9-f19b4ba72902/ZqFhuSbZ2R.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/4480ab10-91ff-4b73-aba4-d01f81866bf0/9rtNWE90l5.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/165c6024-f2c5-48ae-aa55-d895efaad951/YAOSWUhqHh.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/c8f54f8c-9901-4ca3-9ebd-4a4d559ced48/WjKjEpRpFD.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/9ac2c751-30ff-4069-9c44-1cb88736e1e3/8TFhWpnOBV.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/a9d56d11-d6ba-4842-8da5-842b38bf3957/MM65JILZh4.lottie" speed="20"></iframe> *@
        @* <iframe src="https://lottie.host/embed/b77ff5d0-e917-4d73-ae0c-603d0db13873/gCT6uftF65.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/89ad2816-f4f1-4c55-b765-4c61fe9dd44d/IZLcO6yZwk.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/165c6024-f2c5-48ae-aa55-d895efaad951/YAOSWUhqHh.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/ae75c8bb-19c7-425b-8f96-7c449b70c29e/KWQrftxNlM.json"></iframe> *@
        @* <iframe src="https://lottie.host/embed/c52179aa-1c4c-46c0-baad-e5feb4f2bc1d/Sh7pY15JVq.json"></iframe> *@

    @foreach (var contact in contacts)
    {
        <div class="row">
            @* <img src="@GetLoyaltyColor(contact.GetLoyaltyBadge())"/> *@
            <div class="col">
                <div class="card mt-6">
                    <div class="card-body">
                        <img src="@GetLoyaltyColor(contact.GetLoyaltyBadge())" style="display: block; margin: auto; width: 5%;"/>
                        <div class="row">
                            <div class="col" style="text-align: center; font-size: xx-large;">
                                @* <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> *@
                                @* <i class="bi bi-4-square-fill" aria-hidden="true"></i> *@
                                @* <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-person-lines-fill" viewBox="0 0 16 16">
                                    <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m-5 6s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zM11 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5m.5 2.5a.5.5 0 0 0 0 1h4a.5.5 0 0 0 0-1zm2 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h2a.5.5 0 0 0 0-1z"/>
                                </svg>                                 *@
                                <strong><span>@contact.Name</span></strong>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col">
                                <div class="informationBucket">
                                    <div class="informationBucketDetail" style="display: flex; flex-flow: row;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="auto" fill="currentColor" class="bi bi-telephone-fill" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.68.68 0 0 0 .178.643l2.457 2.457a.68.68 0 0 0 .644.178l2.189-.547a1.75 1.75 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.6 18.6 0 0 1-7.01-4.42 18.6 18.6 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877z"/>
                                        </svg>
                                        <strong><span>رقم الجوال</span></strong>
                                    </div>
                                    <span>@contact.Phone</span>
                                </div>
                            </div>
                            <div class="col" style="text-align: center;">
                                <div class="informationBucket">
                                    <div class="informationBucketDetail">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="auto" fill="currentColor" class="bi bi-person-hearts" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M11.5 1.246c.832-.855 2.913.642 0 2.566-2.913-1.924-.832-3.421 0-2.566M9 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0m-9 8c0 1 1 1 1 1h10s1 0 1-1-1-4-6-4-6 3-6 4m13.5-8.09c1.387-1.425 4.855 1.07 0 4.277-4.854-3.207-1.387-5.702 0-4.276ZM15 2.165c.555-.57 1.942.428 0 1.711-1.942-1.283-.555-2.281 0-1.71Z"/>
                                        </svg>
                                        <strong><span>عدد المشتريات</span></strong>
                                    </div>
                                    <span>@contact.GetTotalSalesCount()</span>
                                </div>
                            </div>
                            <div class="col" style="text-align: end;">
                                <div class="informationBucket">
                                    <div class="informationBucketDetail">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-crosshair2" viewBox="0 0 16 16">
                                            <path d="M8 0a.5.5 0 0 1 .5.5v.518A7 7 0 0 1 14.982 7.5h.518a.5.5 0 0 1 0 1h-.518A7 7 0 0 1 8.5 14.982v.518a.5.5 0 0 1-1 0v-.518A7 7 0 0 1 1.018 8.5H.5a.5.5 0 0 1 0-1h.518A7 7 0 0 1 7.5 1.018V.5A.5.5 0 0 1 8 0m-.5 2.02A6 6 0 0 0 2.02 7.5h1.005A5 5 0 0 1 7.5 3.025zm1 1.005A5 5 0 0 1 12.975 7.5h1.005A6 6 0 0 0 8.5 2.02zM12.975 8.5A5 5 0 0 1 8.5 12.975v1.005a6 6 0 0 0 5.48-5.48zM7.5 12.975A5 5 0 0 1 3.025 8.5H2.02a6 6 0 0 0 5.48 5.48zM10 8a2 2 0 1 0-4 0 2 2 0 0 0 4 0"/>
                                        </svg>
                                        <strong><span>متجر الزيارة الأخيرة</span></strong>
                                    </div>
                                    <span>@contact.LastPosSale?.Pos?.Name</span>
                                </div>
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col">
                                <div class="informationBucket">
                                    <div class="informationBucketDetail">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch-fill" viewBox="0 0 16 16">
                                            <path d="M6.5 0a.5.5 0 0 0 0 1H7v1.07A7.001 7.001 0 0 0 8 16a7 7 0 0 0 5.29-11.584l.013-.012.354-.354.353.354a.5.5 0 1 0 .707-.707l-1.414-1.415a.5.5 0 1 0-.707.707l.354.354-.354.354-.012.012A6.97 6.97 0 0 0 9 2.071V1h.5a.5.5 0 0 0 0-1zm2 5.6V9a.5.5 0 0 1-.5.5H4.5a.5.5 0 0 1 0-1h3V5.6a.5.5 0 1 1 1 0"/>
                                        </svg>
                                        <strong><span>آخر زيارة </span></strong>
                                    </div>
                                    <span>منذ @contact.GetTimeElapsedSinceLastVisit() أيام</span>
                                </div>
                            </div>
                            <div class="col" style="text-align: center;">
                                <div class="informationBucket">
                                    <div class="informationBucketDetail">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-basket-fill" viewBox="0 0 16 16">
                                            <path d="M5.071 1.243a.5.5 0 0 1 .858.514L3.383 6h9.234L10.07 1.757a.5.5 0 1 1 .858-.514L13.783 6H15.5a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H15v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9H.5a.5.5 0 0 1-.5-.5v-2A.5.5 0 0 1 .5 6h1.717zM3.5 10.5a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0zm2.5 0a.5.5 0 1 0-1 0v3a.5.5 0 0 0 1 0z"/>
                                        </svg>
                                        <strong><span>حجم السلة الأخيرة</span></strong>
                                    </div>
                                    <span>@contact.LastPosSale?.Total</span>
                                </div>
                            </div>
                            <div class="col" style="text-align: end;">
                                <div class="informationBucket">
                                    <div class="informationBucketDetail">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cart-fill" viewBox="0 0 16 16">
                                            <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5M5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4m7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4m-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2m7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2"/>
                                        </svg>
                                        <strong><span>متوسط حجم السلة</span></strong>
                                    </div>
                                    <span>@contact.AverageTicketAmount</span>
                                </div>
                            </div>
                        </div>
                        <hr >
                        <div class="row" style="text-align: center;">
                            <div class="informationBucket">
                                <div class="informationBucketDetail">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-diagram-3-fill" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M6 3.5A1.5 1.5 0 0 1 7.5 2h1A1.5 1.5 0 0 1 10 3.5v1A1.5 1.5 0 0 1 8.5 6v1H14a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0V8h-5v.5a.5.5 0 0 1-1 0v-1A.5.5 0 0 1 2 7h5.5V6A1.5 1.5 0 0 1 6 4.5zm-6 8A1.5 1.5 0 0 1 1.5 10h1A1.5 1.5 0 0 1 4 11.5v1A1.5 1.5 0 0 1 2.5 14h-1A1.5 1.5 0 0 1 0 12.5zm6 0A1.5 1.5 0 0 1 7.5 10h1a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 8.5 14h-1A1.5 1.5 0 0 1 6 12.5zm6 0a1.5 1.5 0 0 1 1.5-1.5h1a1.5 1.5 0 0 1 1.5 1.5v1a1.5 1.5 0 0 1-1.5 1.5h-1a1.5 1.5 0 0 1-1.5-1.5z"/>
                                    </svg>
                                    <strong><span>عناصر السلة الأخيرة</span></strong>
                                </div>
                                <div class="list-group">
                                    @foreach (var product in contact.purchasedProducts)
                                    {
                                        <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center me-5">
                                            @product.Name
                                            <span>@product.Quantity</span>
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if(contactNotFound)
    {
        <div class="d-flex flex-column align-items-center border-radius-5px p-5" 
            style="background-color: rgba(255,255,255,0.37); z-index: 35;">
            @* <div class="alert alert-danger text-center" role="alert">
            </div> *@
            <span style="color: #fff" class="mb-2"><strong>عذرًا!</strong> لم أعثر على أي نتائج</span>
            <input id="contactName" @onfocus="onInputFocus" @onblur="onInputBlur" type="text" 
                class="form-control" @bind="newContactName" placeholder="إسم العميل" 
                inputmode="text"
                style="color: black; width: 60%;"/>
            <button style="z-index: 33;" type="submit"
                class="w-50 btn btn-lg btn-primary mt-5 mb-5"
                @onclick="createNewContact">تسجيل العميل</button>
        </div>
    }
    <iframe id="indicator" src="https://lottie.host/embed/fc5418d4-36f8-41af-b48a-bf9f03cdc7f6/ugTR6AQf3C.json"></iframe>

</AuthorizeView>

@code {
    private int currentCount = 0;

    private bool showContent = false;
    private bool contactNotFound = false;
    private List<SalesCopilotContact>? contacts = new List<SalesCopilotContact>();
    private string _searchTerm = string.Empty;
    private string newContactName = string.Empty;

    private async Task createNewContact(){
        try{
            if(string.IsNullOrEmpty(newContactName) || newContactName.Length < 2 || string.IsNullOrEmpty(SearchTerm) || SearchTerm.Length < 7){
                await js.InvokeVoidAsync("animateInputShake");
                newContactName = string.Empty;
                return;
            }
            Console.WriteLine("Creating new contact");
            var httpClient = new HttpClient();
            var json = JsonSerializer.Serialize(new
            {
                name = newContactName,
                phone = SearchTerm
            });
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await httpClient.PostAsync("https://faisalaldayel.odoo.com/api/bv/contact", content);

            if(response.IsSuccessStatusCode){
                string jsonString = await response.Content.ReadAsStringAsync();
                using (JsonDocument doc = JsonDocument.Parse(jsonString))
                {
                    JsonElement root = doc.RootElement;
                    int resultId = root.GetProperty("result").GetInt32();

                    dbContext.Contacts.Add(new Contact
                    {
                        Id = resultId, // Use the ID from the response
                        Name = newContactName,
                        Phone = SearchTerm
                    });
                    await dbContext.SaveChangesAsync(); // Save changes asynchronously

                    Console.WriteLine($"Success, {response.StatusCode}, {response.RequestMessage}, ID fetched: {resultId}");
                }
                Console.WriteLine($"Success, {response.StatusCode}, {response.RequestMessage}, {response.Content.ReadAsStringAsync().Result}");
            }else{
                Console.WriteLine($"Error, {response.StatusCode}, {response.RequestMessage}");
            }
            SearchTerm = newContactName = string.Empty;
            contactNotFound = false;

            StateHasChanged();
            await dbContext.SaveChangesAsync();
        }
        catch(Exception e){
            throw e;
            Console.WriteLine($"Error in createNewContact {e.Message}");
        }
    }
    private void EraseSearchTerm(){
        SearchTerm = string.Empty;
        contactNotFound = false; 
    }
    private async Task onInputBlur(){
        if(showContent)
        {
            await js.InvokeVoidAsync("hideIndicator");
            return;
        }
        await js.InvokeVoidAsync("animateInputBlur");
    }
    private async Task onInputFocus(){
        await js.InvokeVoidAsync("animateInputFocus");
    }
    public string SearchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                contactNotFound = false;
                // Call the method to perform the action on change
                if (_searchTerm.Length > 7)
                {
                    SearchContacts();
                }
                else
                {
                    contactNotFound = true; 
                    showContent = false;
                    StateHasChanged();
                }
            }
        }
    }

    private async void SearchContacts()
    {
        var originalContacts = dbContext.Contacts
                        .Where(c => c.Phone.Trim().Contains(SearchTerm))
                        .Include(c => c.LastPosSale)
                        .ThenInclude(s => s.Pos);
        
        contacts = originalContacts.Select(c => new SalesCopilotContact
        {
            Id = c.Id,
            Company = c.Company,
            CreatedBy = c.CreatedBy,
            SaleOrderCount = c.SaleOrderCount,
            PosOrderCount = c.PosOrderCount,
            Email = c.Email,
            Phone = c.Phone,
            Country = c.Country,
            City = c.City,
            ZidId = c.ZidId,
            Name = c.Name,
            LastVisitDate = c.LastVisitDate,
            AverageTicketAmount = c.AverageTicketAmount,
            TotalSpentAmount = c.TotalSpentAmount,
            LastPosSale = c.LastPosSale,
        }).ToList();

        if (contacts.Count == 0)
        {
            contactNotFound = true;
            showContent = false;
            StateHasChanged();
            return;
        }
        foreach (var contact in contacts)
        {
            if (contact.LastPosSale is null)
                continue;
            @* dbContext.Inquiries.Add(new Inquiry
            {
                ContactInquired = contact,
                Pos = dbContext.Pos
            }); *@
            contact.GetLoyaltyBadge();
            contact.purchasedProducts = JsonSerializer.Deserialize<List<Product>>(contact.LastPosSale.PurchasedProducts);
        }
        showContent = true;
        StateHasChanged();
        await dbContext.SaveChangesAsync();
        await js.InvokeVoidAsync("hideIndicator");
    }
    private void changed(){
        Console.WriteLine("hi");
    }
    private string GetLoyaltyColor(LoyaltyBadgeEnum loyaltyBadge)
    {
        if(loyaltyBadge == LoyaltyBadgeEnum.Metal){
            return "1star.png";
        }
        else if (loyaltyBadge == LoyaltyBadgeEnum.Bronz)
            return "2stars.png";
        else if (loyaltyBadge == LoyaltyBadgeEnum.Daimond)
            return "5stars.png";
        else if (loyaltyBadge == LoyaltyBadgeEnum.Gold)
            return "4stars.png";
        return "3stars.png";
    }
    private void IncrementCount()
    {
        currentCount++;
    }
}
